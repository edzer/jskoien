{
    "contents" : "spatialPredict.psgp = function(object,...) {\n\n    dots = list(...)\n    iparams = getIntamapParams(object$params, ...)\n    # PSGP parameters are stored in the variogram model data frame\n    # This is a hack to remain compatible with intamap. The first column\n    # is discarded as it is for \n    # text and used to flag the values as incorrect (to ensure\n    # this is not used as a variogram model). The other 9\n    # columns contain the log parameters, which we put back into a vector\n    params = object$variogramModel\n    psgpLogParams = c(as.numeric(params[1,2:9]), as.numeric(params[2,2:9]))\n    \n    # vario=array()\n    \n    # variogram type\n    # Gau - 1\n    # Exp - 2\n    #\n    \n    # vario[1] = as.integer(object$variogramModel$model[2])\n    #if(object$variogramModel$model[2] == \"Gau\") vario[1]=1\n    #if(object$variogramModel$model[2] == \"Exp\") vario[1]=2\n    #vario[2]=object$variogramModel$range[2]\n    #vario[3]=object$variogramModel$psill[2]\n    #vario[4]=object$variogramModel$psill[1]\n    #vario[5]=object$variogramModel$beta[1]\n    \n    \n    rotated = FALSE\n    if (object$params$doAnisotropy && object$anisPar$doRotation && all(as.character(object$formulaString[[3]])==\"1\")){\n      objTemp = object\n      object$observations = rotateAnisotropicData(object$observations, object$anisPar)\n      object$predictionLocations = rotateAnisotropicData(object$predictionLocations, object$anisPar)\n      rotated = TRUE\n    }\n    \n    #if (require(astonGeostats)) {\n    nPred = nrow(coordinates(object$predictionLocations))\n    nsim = ifelse(\"nsim\" %in% names(dots),dots$nsim,0) \n    if (\"nclus\" %in% names(object$params) && nsim == 0 && nPred >= 5000 ) \n      nclus = iparams$nclus else nclus = 1\n    if (nclus > 1) {\n      clus <- c(rep(\"localhost\", nclus))\n      cl <- makeCluster(clus, type = \"SOCK\")\n      registerDoParallel(cl, nclus)\n      clusterEvalQ(cl, library(psgp))\n      formulaString = object$formulaString\n      observations = object$observations\n      predictionLocations = object$predictionLocations\n      variogramModel = object$variogramModel\n#      clusterExport(cl, list(\"formulaString\", \"observations\", \"predictionLocations\",\n#           \"variogramModel\", \"nmax\", \"nsim\", \"debug.level\"))\n     # split prediction locations:\n      splt = sample(1:nclus, nPred, replace = TRUE)\n      splt = rep(1:nclus, each = ceiling(nPred/nclus), length.out = nPred)\n      newdlst = lapply(as.list(1:nclus), function(w) predictionLocations[splt == w,])\n      nobject = object\n      i <- 1\n      pred <- foreach(i = 1:nclus) %dopar% {\n        nobject$predictionLocations = newdlst[[i]]\n        makePrediction(nobject, psgpLogParams)\n      }\n      stopCluster(cl)\n      var1.pred = unlist(lapply(pred,FUN = function(pp) pp[[1]]))\n      var1.var = unlist(lapply(pred,FUN = function(pp) pp[[2]]))\n      object$predictions = SpatialPointsDataFrame(object$predictionLocations,\n        data = data.frame(var1.pred = var1.pred,var1.var=var1.var))\n    } else {  \n      pred = makePrediction(object, psgpLogParams)\n      object$predictions = SpatialPointsDataFrame(object$predictionLocations,\n        data = data.frame(var1.pred = unlist(pred[1]),var1.var=unlist(pred[2])))\n    }\n    if (nsim > 0) {\n      nmax = object$params$nmax\n      object$predictions = cbind(object$predictions,krige(object$formulaString,object$observations, \n             object$predictionLocations,object$variogramModel,nsim=nsim,nmax = nmax,debug.level = object$params$debug.level))\n    }\n    if (rotated) {\n      object$observations = objTemp$observations\n      object$predictionLocations = objTemp$predictionLocations\n      object$predictions@coords = coordinates(object$predictionLocations)\n      object$predictions@bbox = bbox(object$predictionLocations)\n      proj4string(object$predictions) = proj4string(object$predictionLocations)\n    }\n    names(object$predictions) = c(\"var1.pred\",\"var1.var\")\n    object\n}\n\n",
    "created" : 1452165131569.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "237939407",
    "id" : "736A8FD0",
    "lastKnownWriteTime" : 1452165426,
    "path" : "E:/R/Misc/psgp/psgp2016/psgp/R/spatialPredict.R",
    "project_path" : "R/spatialPredict.R",
    "properties" : {
    },
    "relative_order" : 4,
    "source_on_save" : false,
    "type" : "r_source"
}